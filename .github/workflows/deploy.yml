name: Deploy Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2

    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install and build frontend
      run: |
        npm ci
        npm run build

    - name: Create deployment package
      run: |
        echo "Creating deployment package for staging..."
        tar -czf staging-deployment.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=tests \
          --exclude=.github \
          --exclude=.env.example \
          --exclude=.env.ci \
          .

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        # Aqu√≠ ir√≠an los comandos espec√≠ficos de despliegue a staging
        # Por ejemplo: rsync, scp, docker deploy, etc.

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: []

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2

    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install and build frontend
      run: |
        npm ci
        npm run build

    - name: Run production checks
      run: |
        echo "Running production readiness checks..."
        # Verificar que los archivos cr√≠ticos existen
        test -f composer.json
        test -f package.json
        test -d public/build
        echo "‚úÖ All production checks passed"

    - name: Create production deployment package
      run: |
        echo "Creating production deployment package..."
        tar -czf production-deployment.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=tests \
          --exclude=.github \
          --exclude=.env.example \
          --exclude=.env.ci \
          --exclude=storage/logs/* \
          .

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "‚ö†Ô∏è  Production deployment would happen here"
        # Aqu√≠ ir√≠an los comandos espec√≠ficos de despliegue a producci√≥n
        # Por ejemplo: rsync, scp, docker deploy, kubernetes deploy, etc.

    - name: Post-deployment verification
      run: |
        echo "Running post-deployment verification..."
        echo "‚úÖ Production deployment completed successfully"

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify deployment success
      if: contains(needs.*.result, 'success')
      run: |
        echo "‚úÖ Deployment completed successfully"
        echo "Environment: ${{ github.event.inputs.environment || 'auto' }}"
        echo "Branch: ${{ github.ref_name }}"

    - name: Notify deployment failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "‚ùå Deployment failed"
        echo "Environment: ${{ github.event.inputs.environment || 'auto' }}"
        echo "Branch: ${{ github.ref_name }}"
        exit 1
